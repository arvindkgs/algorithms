/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.akgs.algo.familytree;

import com.akgs.algo.familytree.common.Constants;
import org.junit.jupiter.api.*;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class AppTest {
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @BeforeAll
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @AfterAll
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @AfterEach
    public void clearStreams() {
        outContent.reset();
    }

    @Test
    public void testInvalidArguments() {
        getResource("DefaultFamilyTree.txt");
        assertThrows(IllegalArgumentException.class, ()->{new FamilyTree(null);},"Expected IllegalArgumentException, but not thrown");
        assertThrows(IllegalArgumentException.class, ()->{new FamilyTree("");},"Expected IllegalArgumentException, but not thrown");
        assertThrows(IOException.class, ()->{new FamilyTree("abc");},"Expected IOException, but not thrown");
        assertThrows(IllegalArgumentException.class, ()->{new FamilyTree(getResource("test.txt"));},"Expected IllegalArgumentException, but not thrown");
    }

    @Test
    public void testValid1() {
        try {
            new FamilyTree(getResource("Valid1.txt"));
            assertEquals(Constants.ADD_CHILD_SUCCEEDED+System.lineSeparator()+
                    "Asva Ketu"+System.lineSeparator()+
                    "Vyas Ketu"+System.lineSeparator(), outContent.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testValid2(){
        try {
            new FamilyTree(getResource("Valid2.txt"));
            assertEquals("Atya"+System.lineSeparator()+
                    Constants.NONE+System.lineSeparator()+
                    Constants.PERSON_NOT_FOUND+System.lineSeparator(), outContent.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testValid3(){
        try {
            new FamilyTree(getResource("Valid3.txt"));
            assertEquals(Constants.ADD_CHILD_SUCCEEDED+System.lineSeparator()+
                    "Aria"+System.lineSeparator()+
                    "Jnki Ahit"+System.lineSeparator(), outContent.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testValid4(){
        try {
            new FamilyTree(getResource("Valid4.txt"));
            assertEquals(Constants.PERSON_NOT_FOUND+System.lineSeparator()+
                    Constants.PERSON_NOT_FOUND+System.lineSeparator(), outContent.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testValid5(){
        try {
            new FamilyTree(getResource("Valid5.txt"));
            assertEquals(Constants.ADD_CHILD_FAILED+System.lineSeparator()+
                    Constants.NONE+System.lineSeparator(), outContent.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testValid6(){
        try {
            new FamilyTree(getResource("Valid6.txt"));
            assertEquals("Satvy Krpi"+System.lineSeparator(), outContent.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testValid7(){
        try {
            new FamilyTree(getResource("Valid7.txt"));
            assertEquals(Constants.ADD_CHILD_SUCCEEDED+System.lineSeparator()+
                                "Satya"+System.lineSeparator()+
                                "Ahit"+System.lineSeparator(), outContent.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testInvalid(){
        try{
            new FamilyTree(getResource("Invalid1.txt"));
            assertEquals(Constants.PERSON_NOT_FOUND+System.lineSeparator()+
                    Constants.PERSON_NOT_FOUND+System.lineSeparator(), outContent.toString());
        } catch (IOException e){
            e.printStackTrace();
        }
    }

    private String getResource(String resouceName){
        ClassLoader classLoader = getClass().getClassLoader();
        File file = new File(classLoader.getResource(resouceName).getFile());
        return file.getAbsolutePath();
    }
}
