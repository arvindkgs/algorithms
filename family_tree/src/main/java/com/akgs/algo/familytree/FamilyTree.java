/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.akgs.algo.familytree;

import com.akgs.algo.familytree.common.*;
import com.akgs.algo.familytree.common.exception.AddChildFailedException;
import com.akgs.algo.familytree.common.exception.AddSpouseFailedException;
import com.akgs.algo.familytree.common.exception.CommandFailedException;
import com.akgs.algo.familytree.common.exception.PersonNotFoundException;
import com.akgs.algo.familytree.service.Command;
import com.akgs.algo.familytree.model.Female;
import com.akgs.algo.familytree.model.Male;
import com.akgs.algo.familytree.model.Person;

import java.io.*;
import java.util.*;

/**
 * Initializes a family tree and evaluates and updates tree from given file
 */
public class FamilyTree {
    private Map<String, Person> people;

    public FamilyTree(String path) throws IOException, IllegalArgumentException {
        people = new HashMap<>();
        initialize();
        if(Objects.isNull(path) || path.isEmpty()){
            throw new IllegalArgumentException("No path argument passed.",new IOException("No path argument passed."));
        }
        processFile(path);
    }

    private void processFile(String path) throws IOException{
        processFile(new FileInputStream(new File(path)), true);
    }

    /**
     * Reads input stream and parses commands per-line and evaluates command and updates Family Tree
     * @param inputStream
     * @param print
     * @throws IOException
     */
    private void processFile(InputStream inputStream, Boolean print) throws IOException {
        try(BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {
            String line;
            while ((line = br.readLine()) != null) {
                Command cmd = Command.parse(line);
                try {
                    String out = cmd.evaluate(this);
                    if (print) {
                        System.out.println(out);
                    }
                } catch (CommandFailedException e) {
                    if (print) {
                        if (e.getCause() instanceof AddChildFailedException) {
                            System.out.println(Constants.ADD_CHILD_FAILED);
                        } else if (e.getCause() instanceof PersonNotFoundException) {
                            System.out.println(Constants.PERSON_NOT_FOUND);
                        } else if (e.getCause() instanceof AddSpouseFailedException) {
                            System.out.println(Constants.ADD_SPOUSE_FAILED);
                        }
                    }
                }
            }
        }
    }

    private void initialize(){
        Female queen = new Female(Constants.DEFAULT_QUEEN, null);
        Male king = new Male(Constants.DEFAULT_KING, null);
        queen.addSpouse(king);
        people.put(Constants.DEFAULT_QUEEN, queen);
        people.put(Constants.DEFAULT_KING, king);
        try {
            InputStream inputStream = getClass().getResourceAsStream("/"+Constants.DEFAULT_TREE_FILE);
            processFile(inputStream, false);
        } catch (IOException e) {
        }
    }

    public Person get(String name){
        return people.get(name);
    }

    public static void main(String[] args) {
        if (args.length < 1) {
            System.out.println("Invalid Input. file-path (containing family-tree building commands) argument required.");
            System.exit(1);
        }
        try {
            FamilyTree ft = new FamilyTree(args[0]);
        } catch (IOException e) {
            System.out.println("Error reading file");
        }
    }

    public void add(String name, Person person) {
        people.put(name, person);
    }
}
